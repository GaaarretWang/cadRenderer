// Generates an irradiance cube from an environment map using convolution

#version 450

layout (location = 0) in vec2 inUV;
layout (location = 0) out vec4 outColor;
layout (set=0, binding = 0) uniform samplerCube samplerEnv;
// layout (set=0, binding = 0) uniform sampler2D samplerEnvRec;

// layout(push_constant) uniform PushConstants {
//     layout (offset = 128) uint faceIdx;
// } pc;
layout(push_constant) uniform PushConsts {
	layout (offset = 128) uint numMips;
	layout (offset = 132) uint targetMip;
	layout (offset = 136) uint faceIdx;
} pc;

// #define PI 3.1415926535897932384626433832795

vec3 getSamplingVector(vec2 st)
{
    // [0,1] to [-1,1]
    vec2 uv = 2.0 * vec2(st.x, 1-st.y) - 1.0;
    // vec2 uv = st;

    vec3 ret;
	// Select vector based on cubemap face index.
    // Sadly 'switch' doesn't seem to work, at least on NVIDIA.
    if(pc.faceIdx == 5)      ret = vec3(-uv.x, uv.y, -1.0); //+x
    else if(pc.faceIdx == 4) ret = vec3(uv.x, uv.y, 1.0); //-x
    else if(pc.faceIdx == 3) ret = vec3(uv.x, -1.0, uv.y);  //+y
    else if(pc.faceIdx == 2) ret = vec3(uv.x, 1.0, -uv.y);  //-y
    else if(pc.faceIdx == 0) ret = vec3(1.0,  uv.y, -uv.x);   //+z
    else if(pc.faceIdx == 1) ret = vec3(-1.0, uv.y,  uv.x); //-z
    return normalize(ret);
}

// vec2 hammersley2d(uint i, uint N) 
// {
// 	// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// 	uint bits = (i << 16u) | (i >> 16u);
// 	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
// 	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
// 	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
// 	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
// 	float rdi = float(bits) * 2.3283064365386963e-10;
// 	return vec2(float(i) /float(N), rdi);
// }

void main()
{
	vec3 N = getSamplingVector(inUV);
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = normalize(cross(up, N));

	const float PI = 3.1415926535897932384626433832795;
	const float TWO_PI = PI * 2.0;
	const float HALF_PI = PI * 0.5;

	const uint samples_phi = 180;
	const uint samples_theta = 64;
	// const uint samples_phi = 72;
	// const uint samples_theta = 18;
	uint sampleCount = samples_phi * samples_theta;


	vec3 color = vec3(0.0);
	const float deltaPhi = TWO_PI / float(samples_phi);
	const float deltaTheta = HALF_PI / float(samples_theta); // HALF_PI / 64.0f;
	for (uint iPhi = 0; iPhi < samples_phi; iPhi++) {
		float phi = deltaPhi * iPhi;
		for (uint iTheta = 0; iTheta < samples_theta; iTheta++) {
			float theta = deltaTheta * iTheta;
			vec3 tempVec = cos(phi) * right + sin(phi) * up;
			vec3 sampleVector = cos(theta) * N + sin(theta) * tempVec;
			color += texture(samplerEnv, sampleVector).rgb * cos(theta) * sin(theta);
		}
	}
	outColor = vec4(PI * color / float(sampleCount), 1.0);
}